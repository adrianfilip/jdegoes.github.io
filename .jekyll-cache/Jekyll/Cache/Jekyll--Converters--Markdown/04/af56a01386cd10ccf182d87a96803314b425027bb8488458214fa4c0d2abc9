I"wE<p>Since launching <a href="https://github.com/scalaz/scalaz-zio/">ZIO</a> a few months ago (formerly known as the <em>Scalaz 8 IO monad</em>), one of the most common questions I get is how to use its <code class="highlighter-rouge">IO</code> type with <a href="https://blog.scalac.io/exploring-tagless-final.html"><em>tagless-final</em></a>.</p>

<p>In this post, I’ll explain how ZIO works with tagless-final, and when it makes sense to modify your type classes to take advantage of the new power provided by ZIO for modeling typed errors.</p>

<h2 id="zio-vs-other-effect-types">ZIO vs Other Effect Types</h2>

<p>In ZIO, a value of type <code class="highlighter-rouge">IO[E, A]</code> is an immutable value that describes an effectful program. The program may fail with some error of type <code class="highlighter-rouge">E</code>, or produce a value of type <code class="highlighter-rouge">A</code>.</p>

<p>As I’ve <a href="https://degoes.net/articles/fpoop-vs-fp">previously argued</a>, this purely functional model has many practical benefits that make it <a href="https://degoes.net/articles/fpoop-vs-fp">extremely attractive</a>, even for developers who don’t care about functional programming.</p>

<p>Other popular Scala libraries like <a href="https://github.com/monix/monix">Monix</a> also have effect types, but ZIO is the only one that provides <a href="https://degoes.net/articles/bifunctor-io">typed errors</a>. The other effect types fix the error type to <code class="highlighter-rouge">Throwable</code>, which means it is not possible to constrain if and how effects may fail at compile-time, leading to bugs and poor reasoning properties.</p>

<p>This difference in power means that the <em>kinds</em> of <code class="highlighter-rouge">IO</code> and other effect types differ:</p>

<ul>
  <li>ZIO’s effect type has kind <code class="highlighter-rouge">(*, *) -&gt; *</code>, which means that the type constructor for <code class="highlighter-rouge">IO</code> takes two type parameters: the type of errors, and the type of values.</li>
  <li>Other effect types have kind <code class="highlighter-rouge">* -&gt; *</code>, which means their type constructors take one type parameter: the type of values.</li>
</ul>

<p>Ordinarily, you don’t notice this difference, because ZIO is designed to have excellent type inference. Scala figures out the type parameters for both <code class="highlighter-rouge">E</code> and <code class="highlighter-rouge">A</code>.</p>

<p>There’s one place, however, where you have to think more carefully about the difference between ZIO and older effect types: the tagless-final encoding of effects.</p>

<h2 id="tagless-final">Tagless-Final</h2>

<p>In the tagless-final pattern, you describe your effects using a type class, which typically takes a single type constructor <code class="highlighter-rouge">F[_]</code> (with kind <code class="highlighter-rouge">* -&gt; *</code>). For example, we might have a type class that describes the effect of logging:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">trait</span> <span class="nc">Logging</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span> <span class="o">]]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="nf">log</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span>
<span class="o">}</span></code></pre></figure>

<p>As demonstrated in a <a href="https://www.youtube.com/watch?v=sxudIMiOo68&amp;t=53s%C2%A0&amp;app=desktop">recent live-coding talk</a> I did for <em>Fun(c)tional Programming Group</em>, using effect type classes like these has several benefits:</p>

<ol>
  <li>It allows us to see what effects functions use, so we can better understand our functions without having to drill down into their implementations, and find all the functions they call (which is error-prone and takes lots of time);</li>
  <li>It allows us to reuse more code. For example, we can have different instances of the <code class="highlighter-rouge">Logging</code> type class for different production environments. One can log remotely, one can log locally, and one can not log at all.</li>
  <li>It allows us to easily mock effectful code without having to interact with the real world (so our tests can be fast and deterministic) and without having to rely on painful mocking libraries.</li>
</ol>

<p>Yet because ZIO’s effect type takes two type parameters, and traditionally, in tagless-final, our effects only take one type parameter, many developers have had the question: how can we use ZIO with tagless-final?</p>

<p>In the sections that follow, I’ll explore the two ways to use ZIO with tagless-final, and then give you some guidance on how to choose the best method for every situation.</p>

<h2 id="fixing-the-error-type">Fixing the Error Type</h2>

<p>Although we cannot make <code class="highlighter-rouge">IO</code> implement a type class like <code class="highlighter-rouge">Logging</code> directly, because it has the wrong kind, if we partially apply <code class="highlighter-rouge">IO</code> to its first type parameter (that is, if we <em>fix</em> the error type), then we can create an instance for the partially applied type constructor.</p>

<p>In the following example, I assume we have a function <code class="highlighter-rouge">def logIo(message: String): IO[Nothing, Unit]</code>, which I use to implement the type class for any fixed error type <code class="highlighter-rouge">E</code>:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="c1">// NOTE: Uses the kind-projector compiler-plugin for</span>
<span class="c1">// easier syntax for partial type application:</span>
<span class="k">implicit</span> <span class="k">def</span> <span class="nf">IOLogging</span><span class="o">[</span><span class="kt">E</span><span class="o">]</span><span class="k">:</span> <span class="kt">Logging</span><span class="o">[</span><span class="kt">IO</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">?</span><span class="o">]]</span> <span class="k">=</span>
  <span class="k">new</span> <span class="nc">Logging</span><span class="o">[</span><span class="kt">IO</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">?</span><span class="o">]]</span> <span class="o">{</span>
    <span class="k">def</span> <span class="nf">log</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">IO</span><span class="o">[</span><span class="kt">E</span>, <span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span> <span class="nf">logIo</span><span class="o">(</span><span class="n">message</span><span class="o">)</span>
  <span class="o">}</span></code></pre></figure>

<p>With this approach, we may now use the <code class="highlighter-rouge">Logging</code> type class with the <code class="highlighter-rouge">IO</code> type. Let’s say we have some function <code class="highlighter-rouge">processData</code> that requires logging:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">def</span> <span class="nf">processData</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span> <span class="o">]</span><span class="kt">:</span> <span class="kt">Logging:</span> <span class="kt">Monad</span><span class="o">]</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span>
  <span class="o">???</span></code></pre></figure>

<p>Then now we can call <code class="highlighter-rouge">processData</code> with <code class="highlighter-rouge">IO[E, ?]</code> for any error type <code class="highlighter-rouge">E</code>, because our implicit function <code class="highlighter-rouge">IOLogging</code> defines an entire <em>family</em> of <code class="highlighter-rouge">Logging</code> instances across all type parameters <code class="highlighter-rouge">E</code>.</p>

<p>Sometimes, we can’t provide instances for all error types. For example, if our logging function <code class="highlighter-rouge">logIo</code> can throw <code class="highlighter-rouge">IOException</code>, then we have to constrain the error type in our instance for the <code class="highlighter-rouge">IO</code> data type:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">implicit</span> <span class="k">val</span> <span class="nv">IOLogging</span><span class="k">:</span> <span class="kt">Logging</span><span class="o">[</span><span class="kt">IO</span><span class="o">[</span><span class="kt">IOException</span>, <span class="kt">?</span><span class="o">]]</span> <span class="k">=</span>
  <span class="k">new</span> <span class="nc">Logging</span><span class="o">[</span><span class="kt">IO</span><span class="o">[</span><span class="kt">IOException</span>, <span class="kt">?</span><span class="o">]]</span> <span class="o">{</span>
    <span class="k">def</span> <span class="nf">log</span><span class="o">(</span><span class="n">message</span><span class="k">:</span> <span class="kt">String</span><span class="o">)</span><span class="k">:</span> <span class="kt">IO</span><span class="o">[</span><span class="kt">IOException</span>, <span class="kt">Unit</span><span class="o">]</span> <span class="k">=</span>
      <span class="nf">logIo</span><span class="o">(</span><span class="n">message</span><span class="o">)</span>
  <span class="o">}</span></code></pre></figure>

<p>In this case, because we needed the ability to fail, we had to restrict the instance to a specific error type. This means we can no longer use <code class="highlighter-rouge">Logging</code> for just <em>any</em> <code class="highlighter-rouge">IO</code> type; it has to be one that can fail with an <code class="highlighter-rouge">IOException</code> (or a supertype, like <code class="highlighter-rouge">Exception</code> or <code class="highlighter-rouge">Throwable</code>).</p>

<p>In both cases, we were able to use the same type class we would use for other effect types. We didn’t need to change a thing.</p>

<h2 id="varying-the-error-type">Varying the Error Type</h2>

<p>The alternative to fixing error types is to let them vary, which requires that we change our tagless-final encoding.</p>

<p>Let’s say we have the following type class, which allows us to execute some query locally or in a distributed fashion:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">trait</span> <span class="nc">Analytics</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span> <span class="o">]]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="nf">local</span><span class="o">(</span><span class="n">query</span><span class="k">:</span> <span class="kt">Query</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>

  <span class="k">def</span> <span class="nf">distributed</span><span class="o">(</span><span class="n">query</span><span class="k">:</span> <span class="kt">Query</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">A</span><span class="o">]</span>
<span class="o">}</span></code></pre></figure>

<p>Let’s say the local execution cannot fail, but the distributed execution can fail due to network errors. In this case, we would like to capture the distinction between these methods, so developers know by looking at the types what can happen.</p>

<p>To do this, we could always use an <code class="highlighter-rouge">Either</code>, but since the capability is baked into ZIO, there’s no need to add additional runtime and cognitive overhead. Instead, we can just change the kind of our effect parameter from <code class="highlighter-rouge">* -&gt; *</code> to <code class="highlighter-rouge">(*, *) -&gt; *</code>.</p>

<p>This lets us vary the error type for each method:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">trait</span> <span class="nc">Analytics</span><span class="o">[</span><span class="kt">F</span><span class="o">[</span><span class="k">_</span>,<span class="k">_</span><span class="o">]]</span> <span class="o">{</span>
  <span class="k">def</span> <span class="nf">local</span><span class="o">(</span><span class="n">query</span><span class="k">:</span> <span class="kt">Query</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">Nothing</span>, <span class="kt">A</span><span class="o">]</span>

  <span class="k">def</span> <span class="nf">distributed</span><span class="o">(</span><span class="n">query</span><span class="k">:</span> <span class="kt">Query</span><span class="o">[</span><span class="kt">A</span><span class="o">])</span><span class="k">:</span> <span class="kt">F</span><span class="o">[</span><span class="kt">NetworkError</span>, <span class="kt">A</span><span class="o">]</span>
<span class="o">}</span></code></pre></figure>

<p>Now we can clearly see that <code class="highlighter-rouge">local</code> queries cannot fail, but <code class="highlighter-rouge">distributed</code> queries can fail due to network errors.</p>

<p>This type class does not limit us to ZIO, either. For the <code class="highlighter-rouge">Task</code> type in Monix, for example, while we cannot create an instance of <code class="highlighter-rouge">Analytics</code> for <code class="highlighter-rouge">Task</code> directly, we can create an instance for <code class="highlighter-rouge">EitherT[Task, ?, ?]</code> (<code class="highlighter-rouge">EitherT</code> is a monad transformer that adds typed errors to a base monad).</p>

<p>This means that when you parameterize your type classes over effects that take two type parameters, developers can choose whether to use ZIO or to use another effect monad and layer on typed errors with the <code class="highlighter-rouge">EitherT</code> monad transformer.</p>

<h2 id="choices-choices">Choices, Choices</h2>

<p>The choice about whether to use tagless-final with <code class="highlighter-rouge">F[_]</code> or <code class="highlighter-rouge">F[_, _]</code> is pretty straightforward:</p>

<ul>
  <li>If the effects of your type class cannot fail, or can fail with only a single type of error across all methods, then you should parameterize your type classes with <code class="highlighter-rouge">F[_]</code>. You can easily provide instances of this type for ZIO and other effect monads. No changes are required.</li>
  <li>If the effects of your type class can fail in different ways, then you should parameterize your type classes with <code class="highlighter-rouge">F[_, _]</code>, so you can precisely capture the different failure modes in the type class. You can easily provide instances of this type for ZIO. For other effect monads like <code class="highlighter-rouge">Task</code>, you can provide instances for <code class="highlighter-rouge">EitherT[Task, ?, ?]</code>.</li>
</ul>

<p>It’s easy to combine the two styles in one code base. For example, a data processing function that requires <code class="highlighter-rouge">F[_, _]: Analytics</code> can call a logging function that requires <code class="highlighter-rouge">F[_]: Logging</code> by simply requiring <code class="highlighter-rouge">L: Logging[F[IOException, ?]]</code>.</p>

<h2 id="summary">Summary</h2>

<p>In this post, we’ve seen that the effect type in ZIO allows us to precisely model if and how computations may fail. We’ve also seen that because of this power, the kind of ZIO’s <code class="highlighter-rouge">IO</code> type differs from the kind of other effect types—it takes two type parameters, rather than one.</p>

<p>Because of this difference, many developers wonder how to use ZIO with tagless-final. Fortunately, using tagless-final with ZIO is trivial. As long as all methods produce the same error type (or no error at all), then there’s no need to make any changes to the type classes.</p>

<p>In some cases, if we want our type classes to describe effects that can fail in different ways, we are able to improve on classic tagless-final by varying the error type. In this case, our type classes become parameterized over <code class="highlighter-rouge">F[_, _]</code>, allowing each method to specify its own error type. We can support other effect types by writing instances for <code class="highlighter-rouge">EitherT</code>.</p>

<p>In summary, ZIO is not only compatible with tagless-final, but also lets us take tagless-final to the next level of compile-time precision, while still preserving full compatibility with older dynamically-typed effect monads.</p>

<p><em>If you like this blog post, don’t miss John A. De Goes’ <a href="https://www.eventbrite.com/e/functional-scala-by-john-a-de-goes-tickets-48461417404">upcoming 5 day training</a> in Functional Scala, held remotely or on-site in the Scottish highlands.</em></p>
:ET