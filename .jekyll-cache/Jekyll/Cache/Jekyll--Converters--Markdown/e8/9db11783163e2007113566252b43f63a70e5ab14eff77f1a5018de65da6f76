I"WO<p>The <a href="https://antiifcampaign.com">Anti-IF Campaign</a> currently stands at 4,136
signatures, and there’s a reason: conditional statements are frequently a
troublesome source of bugs and brittle logic, and they make reasoning about
code difficult because they multiply the code paths.</p>

<p>The problem is not necessarily with conditionals: it’s with the boolean values
that are required to use conditionals. A boolean value reduces a huge amount of
information to a single bit (<code class="highlighter-rouge">0</code> or <code class="highlighter-rouge">1</code>). Then on the basis of that bit,
the program makes a decision to take one path or a totally different one.</p>

<p>What could possibly go wrong — Right?</p>

<h1 id="the-root-problem">The Root Problem</h1>

<p>I’ve long argued that, despite all its flaws, one of the great things about
functional programming is its intrinsic <em>inversion of control</em>.</p>

<p>In an impure imperative language, if you call some function
<code class="highlighter-rouge">void doX(State *state)</code>, the function can do anything it wants. It can modify
state (both passed in and global), it can delete files, it can read from the
network, and it can even launch nukes!</p>

<p>In a pure functional language, however, if you call some function
<code class="highlighter-rouge">doX :: State -&gt; IO ()</code>, then at most it’s going to return a value. It can’t
modify what you pass it, and if you like, you can ignore the value returned by
the function, in which case calling the function has no effect (aside from
sucking up a little CPU and RAM).</p>

<p>Now granted, <code class="highlighter-rouge">IO</code> in Haskell is <strong>not</strong> a strong example of an abstraction that
has superior reasoning properties, but the fundamental principle is sound: in
pure functional programming languages, the control is <em>inverted</em> to the caller.</p>

<p>Thus, as you’re looking at the code, you have a clearer sense of what the
functions you are calling can do, without having to unearth their foundations.</p>

<p>I think this generalizes to the following principle:</p>

<blockquote>
  <p>Code that inverts control to the caller is generally easier to understand.</p>
</blockquote>

<p>(I actually think this is a specialization of an even <em>deeper</em> principle — that
code which destroys information is generally harder to reason about than code
which does not.)</p>

<p>Viewed from this angle, you can see that if we embed conditionals deep into
functions, and we call those functions, we have lost a certain amount of
control: we feed in inputs, but they are combined in arbitrary and unknown
ways to arrive at a decision (which code path to take) that has humongous
ramifications on how the program behaves.</p>

<p>It’s no wonder that conditionals (and with them, booleans) are so widely despised!</p>

<h1 id="a-closer-look">A Closer Look</h1>

<p>In an object-oriented programming language, it’s generally considered a good
practice to <a href="https://refactoring.com/catalog/replaceConditionalWithPolymorphism.html">replace conditionals with polymorphism</a>.</p>

<p>In a similar fashion, in functional programming, it’s often considered good
practice to replace boolean values with algebraic data types.</p>

<p>For example, let’s say we have the following function that checks to see if
some target string matches a pattern:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">match</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Boolean</span> <span class="o">-&gt;</span> <span class="kt">Boolean</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
<span class="n">match</span> <span class="n">pattern</span> <span class="n">ignoreCase</span> <span class="n">globalMatch</span> <span class="n">target</span> <span class="o">=</span> <span class="o">...</span>
</code></pre></div></div>

<p>(Let’s ignore the boolean return value and focus on the two boolean parameters.)</p>

<p>Looking at the <code class="highlighter-rouge">match</code> function, you probably see how it’s very signature is
going to cause lots of bugs. Developers (including the one who wrote the function!)
will confuse the order of parameters and forget the meaning.</p>

<p>One way to make the interface harder to misuse is to replace the boolean
parameters with custom algebraic data types:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data Case = CaseInsensitive | CaseSensitive

data Predicate = Contains | Equals

match :: String -&gt; Case -&gt; Predicate -&gt; String -&gt; Bool
match pattern cse pred target = ...
</code></pre></div></div>

<p>By giving each parameter a type, and by using names, we force the developers
who call the function to deal with the type and semantic differences between
the second and third parameters.</p>

<p>This is a big improvement, to be sure, but let’s not kid ourselves: both <code class="highlighter-rouge">Case</code>
and <code class="highlighter-rouge">Predicate</code> are still “boolean” values that have 1 bit of information each,
and inside of <code class="highlighter-rouge">match</code>, <em>big decisions</em> will be made based on those bits!</p>

<p>We’ve cut out <em>some</em> potential for error, but we haven’t gone as far as our
object-oriented kin, because our code still contains conditionals.</p>

<p>Fortunately, there’s a simple technique you can use to purge almost all
conditionals from your code base. I call it, <em>replace conditional with lambda</em>.</p>

<h1 id="replace-conditional-with-lambda">Replace Conditional with Lambda</h1>

<p>When you’re tempted write a conditional based on boolean values that are passed
into your function, I encourage you to rip out those values, and replace them
with a lambda that performs the <em>effect</em> of the conditional.</p>

<p>For example, in our preceding <code class="highlighter-rouge">match</code> function, somewhere inside there’s
probably a conditional that looks like this:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">let</span> <span class="p">(</span><span class="n">pattern'</span><span class="p">,</span> <span class="n">target'</span><span class="p">)</span> <span class="o">=</span> <span class="kr">case</span> <span class="n">cse</span> <span class="kr">of</span>
  <span class="kt">CaseInsensitive</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">toUpperCase</span> <span class="n">pattern</span><span class="p">,</span> <span class="n">toUpperCase</span> <span class="n">target</span><span class="p">)</span>
  <span class="kt">CaseSensitive</span>   <span class="o">-&gt;</span> <span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">target</span><span class="p">)</span>
</code></pre></div></div>

<p>which normalizes the case of the strings based on the sensitivity flag.</p>

<p>Instead of making a decision based on a bit, we can pull out the logic into
a lambda that’s passed into the function:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">type</span> <span class="kt">Case</span> <span class="o">=</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">String</span>

<span class="kr">data</span> <span class="kt">Predicate</span> <span class="o">=</span> <span class="kt">Contains</span> <span class="o">|</span> <span class="kt">Equals</span>

<span class="n">match</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Case</span> <span class="o">-&gt;</span> <span class="kt">Predicate</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
<span class="n">match</span> <span class="n">pattern</span> <span class="n">cse</span> <span class="n">pred</span> <span class="n">target</span> <span class="o">=</span> <span class="o">...</span>
  <span class="kr">let</span> <span class="p">(</span><span class="n">pattern'</span><span class="p">,</span> <span class="n">target'</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">cse</span> <span class="n">pattern</span><span class="p">,</span> <span class="n">cse</span> <span class="n">target</span><span class="p">)</span>
</code></pre></div></div>

<p>In this case, because we are accepting a user-defined lambda which we are then
applying to user-defined functions, we can actually perform a further
refactoring to create a match combinator:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">type</span> <span class="kt">Matcher</span> <span class="o">=</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Predicate</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>

<span class="n">caseInsensitive</span> <span class="o">::</span> <span class="kt">Matcher</span> <span class="o">-&gt;</span> <span class="kt">Matcher</span>

<span class="n">match</span> <span class="o">::</span> <span class="kt">Matcher</span>
</code></pre></div></div>

<p>Now a user can choose between a case sensitive match with the following code:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">match</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span>                 <span class="c1">-- case sensitive</span>
<span class="n">caseInsensitive</span> <span class="n">match</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="c1">-- case insensitive</span>
</code></pre></div></div>

<p>Of course, we still have another bit and another conditional: the predicate flag.
Somewhere inside the <code class="highlighter-rouge">match</code> function, there’s a conditional that looks at <code class="highlighter-rouge">Predicate</code>:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">case</span> <span class="n">pred</span> <span class="kr">of</span>
  <span class="kt">Contains</span> <span class="o">-&gt;</span> <span class="n">contains</span> <span class="n">pattern'</span> <span class="n">target'</span>
  <span class="kt">Equals</span>   <span class="o">-&gt;</span> <span class="n">eq</span> <span class="n">pattern'</span> <span class="n">target'</span>
</code></pre></div></div>

<p>This can be extracted into another lambda:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">match</span> <span class="o">::</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">Bool</span>
</code></pre></div></div>

<p>Now you can test strings like so:</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>caseInsensitive match "foo" eq       "foobar" -- false
caseInsensitive match "fOO" contains "foobar" -- true
</code></pre></div></div>

<p>Of course, now the function <code class="highlighter-rouge">match</code> has been simplified so much, it no longer
needs to exist, but in general that won’t happen during your refactoring.</p>

<p>Note that as we performed this refactoring, the function became more general-
purpose. I consider that a side-benefit of the technique, which replaces highly-
specialized code with more generic code.</p>

<p>Now let’s go through a real world case instead of a made-up toy example.</p>

<h1 id="psc-publish">psc-publish</h1>

<p>The PureScript compiler has a publish tool, with a <a href="https://github.com/purescript/purescript/blob/9f292cf64e23723f0851f59b2672a3c1e2c546ed/psc-publish/Main.hs#L42-L50">function defined approximately as follows</a>:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">publish</span> <span class="o">::</span> <span class="kt">Bool</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">publish</span> <span class="n">isDryRun</span> <span class="o">=</span>
  <span class="kr">if</span> <span class="n">isDryRun</span>
    <span class="kr">then</span> <span class="kr">do</span>
      <span class="kr">_</span> <span class="o">&lt;-</span> <span class="n">unsafePreparePackage</span> <span class="n">dryRunOptions</span>
      <span class="n">putStrLn</span> <span class="s">"Dry run completed, no errors."</span>
    <span class="kr">else</span> <span class="kr">do</span>
      <span class="n">pkg</span> <span class="o">&lt;-</span> <span class="n">unsafePreparePackage</span> <span class="n">defaultPublishOptions</span>
      <span class="n">putStrLn</span> <span class="p">(</span><span class="kt">A</span><span class="o">.</span><span class="n">encode</span> <span class="n">pkg</span><span class="p">)</span>
</code></pre></div></div>

<p>The purpose of <code class="highlighter-rouge">publish</code> is either to do a dry-run publish of a package (so the
user can make sure it works), or to publish the package for real.</p>

<p>Currently, the function accepts a boolean parameter, which indicates whether or
not it’s a dry-run. The function branches off this bit to decide the behavior of
the program.</p>

<p>Let’s unify the two code branches by extracting out the options, and introducing
a lambda to handle the different messages printed after package preparation:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">type</span> <span class="kt">Announcer</span> <span class="o">=</span> <span class="kt">String</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="kt">String</span>

<span class="n">dryRun</span> <span class="o">::</span> <span class="kt">Announcer</span>
<span class="n">dryRun</span> <span class="o">=</span> <span class="n">const</span> <span class="p">(</span><span class="n">putStrLn</span> <span class="s">"Dry run completed, no errors."</span><span class="p">)</span>

<span class="n">forReal</span> <span class="o">::</span> <span class="kt">Announcer</span>
<span class="n">forReal</span> <span class="o">=</span> <span class="n">putStrLn</span> <span class="o">&lt;&lt;</span><span class="p">(</span><span class="kt">A</span><span class="o">.</span><span class="n">encode</span> <span class="n">pkg</span><span class="p">)</span>

<span class="n">publish</span> <span class="o">::</span> <span class="kt">PublishOptions</span> <span class="o">-&gt;</span> <span class="kt">Announcer</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">publish</span> <span class="n">options</span> <span class="n">announce</span> <span class="o">=</span> <span class="n">unsafePreparePackage</span> <span class="n">options</span> <span class="o">&gt;&gt;=</span> <span class="n">announce</span>
</code></pre></div></div>

<p>This is better, but it’s still not great because we have to feed two parameters
into the function <code class="highlighter-rouge">publish</code>, and we’ve introduced new options that don’t make
sense (publish with dry run options, but announce with <code class="highlighter-rouge">forReal</code>).</p>

<p>To solve this, we’ll extend <code class="highlighter-rouge">PublishOptions</code> with an <code class="highlighter-rouge">announcer</code> field, which
lets us collapse the code to the following:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">forRealOptions</span> <span class="o">::</span> <span class="kt">PublishOptions</span>
<span class="n">forRealOptions</span> <span class="o">=</span> <span class="o">...</span>

<span class="n">dryRunOptions</span> <span class="o">::</span> <span class="kt">PublishOptions</span>
<span class="n">dryRunOptions</span> <span class="o">=</span> <span class="o">...</span>

<span class="n">publish</span> <span class="o">::</span> <span class="kt">PublishOptions</span> <span class="o">-&gt;</span> <span class="kt">IO</span> <span class="nb">()</span>
<span class="n">publish</span> <span class="n">options</span> <span class="o">=</span> <span class="n">unsafePreparePackage</span> <span class="n">options</span> <span class="o">&gt;&gt;=</span> <span class="n">announcer</span> <span class="n">options</span>
</code></pre></div></div>

<p>Now a user can call the function like so:</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">publish</span> <span class="n">forRealOptions</span>
<span class="n">publish</span> <span class="n">dryRunOptions</span>
</code></pre></div></div>

<p>There are no conditionals and no booleans, just functions. You never need to
decide what bits mean, and you can’t get them wrong.</p>

<p>Now that the control has been inverted, the <em>caller</em> of the <code class="highlighter-rouge">publish</code> function
has the ultimate power, and can decide what happens deep in the program merely
by passing the right functions in.</p>

<h1 id="summary">Summary</h1>

<p>If you don’t have any trouble reasoning about code that overflows with booleans
and conditionals, then more power to you!</p>

<p>For the rest of us, however, conditionals complicate reasoning. Fortunately,
just like OOP has a technique for getting rid of conditionals, we functional
programmers have an alternate technique that’s just as powerful.</p>

<p>By replacing conditionals with lambdas, we can invert control and make our code
both easier to reason about and more generic.</p>

<p>So what are you waiting for?</p>

<p>Go sign the <a href="https://antiifcampaign.com">Anti-IF Campaign</a> today. :)</p>

<p><em>P.S.</em> I’m just joking about the Anti-IF campaign (but it’s kinda funny).</p>

<h1 id="addendum">Addendum</h1>

<p>After writing this post, it has occurred to me the problem is larger than just
boolean values.</p>

<p>The problem is fundamentally a <em>protocol</em> problem: booleans (and other types) are
often used to encode program semantics.</p>

<p>Therefore, in a sense, a boolean is a serialization protocol for communicating
intention from the caller site to the callee site.</p>

<p>At the caller site, we serialize our intention into a bit (or other data value),
pass it to the function, and then the function deserializes the value into an
intention (a chunk of code).</p>

<p>Boolean blindness errors are really just <em>protocol errors</em>. Someone screwed up
on the serialization or deserialization side of things; or maybe just caller
or callee misunderstood the protocol and thought different bits had different
meanings.</p>

<p>In functional programming, the use of lambdas allows us to propagate not merely
a <em>serialized</em> version of our intentions, but our <em>actual</em> intentions! In other
words, lambdas let us pull the intentions out of the callee site, and into the
caller site, since we can propagate them directly without serialization.</p>

<p>In older programming languages, this could not be done: there was no way to ship
semantics (a hunk of code) from one part of the program to another. Today’s
programming languages support this style of programming (to varying degrees),
and functional programming languages encourage it.</p>

<p>Inversion of control, in this limited sense, is about removing the possibility
of a protocol error by giving the caller direct control over semantic knobs
exposed by the callee.</p>

<p>Kinda cool, eh?</p>
:ET